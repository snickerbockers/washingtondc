                          snickerbockers proudly presents

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ THE BULLSHIT FILE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                documenting weird things SEGA Dreamcast games
		somehow manage to get away with doing


Guilty Gear X:
    * attempts to read a 4 byte integer from 0xfffffffc
    * This happens because it reads from -4 offset from a NULL pointer
    * the pointer is 160 bytes from the beginning of some struct which is
      itself 192 bytes
    * there are several such structures in an array
    * this is not always an error sometimes the pointer is not NULL, and instead
      points to a valid memory address
    * on real hardware, *(uint32_t*)0xfffffffc == 0
    * Here is where the NULL pointer is loaded into R4:
          0x8c0245f8:  mov.l   @(r0,r14),r4
    * Here is where the memory access at 0xfffffffc happens:
          0x8c025ece:	add    #-8,r4
          0x8c025ed0:	mov.l  @(4,r4),r3

Grand Theft Auto 2:
    * writes 0 (4 bytes)to the following undocumented addresses at PC=0x8c01232a:
      0xbc402a6c, 0xbc402dbc, 0xbc40310c, 0xbc40345c,
      0xbc4037ac, 0xbc403afc, 0xbc403e4c, 0xbc40419c,
      0xbc4044ec, 0xbc40483c, 0xbc404b8c, 0xbc404edc,
      0xbc40522c, 0xbc40557c, 0xbc4058cc, 0xbc405c1c
      This is most likely a mistake on the game's part, as it gets to those
      addresses by multiplying r15 (which is the stack pointer) by four and
      adding some offsets to it.  I don't think it ever makes sense to multiply
      the stack pointer, or any other pointer, by a scalar like that.


Street Fighter Alpha 3:
    * needs realistic AICA DMA timings or else it will hang before displaying
      the CAPCOM logo
    * It briefly displays an "ERROR: load failed" message onscreen between the
      two CAPCOM logos despite successfully loading.  This is actually something
      that happens on real hardware and not an emulation bug.

Sonic Adventure 2:
    * renders vertices with infinite 1/z.  This corresponds to a depth of 0, ie at
      the near plane.  This means that it's impossible to linearly map the depth
      values of every single vertex on-screen to a fixed range (-1..1 for OpenGL or
      0..1 for Direct X) because every other vertex is infinitely far away from the
      vertices with infinite 1/z.  Ignoring the infinite 1/z vertices works well
      enough even if it's not strictly accurate.

SoulCalibur:
    * This game has a similar problem to Sonic Adventure 2: it renders vertices
      with extremely large 1/z value, although not literally infinity like it
      is in SA2.  The workaround is exactly the same, as the massive 1/z values
      are extreme outliers and every other vertex has a much more reasonable
      1/z.
